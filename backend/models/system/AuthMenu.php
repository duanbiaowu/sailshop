<?php

namespace backend\models\system;

use Yii;
use yii\helpers\BaseVarDumper;
use yii\rbac\Permission;

/**
 * This is the model class for table "{{%auth_menu}}".
 *
 * @property integer $id
 * @property string $name
 * @property integer $parent_id
 * @property string $route
 * @property int $sort
 */
class AuthMenu extends \yii\db\ActiveRecord
{
    const TOP_MENU_TYPE = 0;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%menu}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'route'], 'required'],
            [['parent_id', 'sort'], 'integer'],
            [['parent_id', 'sort'], 'default', 'value' => 0],
            [['name'], 'string', 'max' => 32],
            [['route'], 'string', 'max' => 128]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('System', 'ID'),
            'name' => Yii::t('System', 'Menu Name'),
            'parent_id' => Yii::t('System', 'Menu Parent ID'),
            'route' => Yii::t('System', 'Menu Route'),
            'sort' => Yii::t('System', 'Menu Sort'),
        ];
    }

    public function categories()
    {
        $menus = AuthMenu::find()
            ->where(['parent_id' => self::TOP_MENU_TYPE])
            ->orderBy(['sort' => SORT_DESC])
            ->asArray()
            ->all();

        foreach ($menus as &$menu) {
            $menu['children'] = AuthMenu::find()
                ->where(['parent_id' => $menu['id']])
                ->orderBy(['sort' => SORT_DESC])
                ->asArray()
                ->all();
        }

        return $menus;
    }

    public function formatAllMenu()
    {
        $menus = $this->categories();
        foreach ($menus as &$menu) {
            foreach ($menu['children'] as &$child) {
                $child['children'] = AuthMenu::find()
                    ->where(['parent_id' => $child['id']])
                    ->orderBy(['sort' => SORT_DESC])
                    ->asArray()
                    ->all();
            }
        }
        return $menus;
    }

    public function afterDelete()
    {
        foreach (AuthMenu::findAll(['parent_id' => $this->id]) as $menu) {
            AuthMenu::deleteAll(['parent_id' => $menu['id']]);
            $menu->delete();
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * 获取指定菜单所有权限
     * @return \yii\db\ActiveQuery
     */
    public function getPermissions()
    {
        return $this->hasMany(MenuPermission::className(), ['menu_id' => 'id']);
    }

    /**
     * 获取所有菜单
     * @return array
     */
    public static function getAllMenus()
    {
        return AuthMenu::find()
            ->orderBy(['sort' => SORT_DESC])
            ->addOrderBy(['id' => SORT_ASC])
            ->indexBy('id')
            ->asArray()
            ->all();
    }

    /**
     * 获取指定路由对应权限
     * @param string $route
     * @return null|MenuPermission
     */
    public static function findPermissionByRoute($route)
    {
        if ($route == Yii::$app->homeUrl) {
            return null;
        }

        // 兼容多页面权限方法为空
        if (strpos(Yii::$app->request->pathInfo, 'statistic/') !== false) {
            $menu = AuthMenu::find()
                ->andWhere(['route' => '/' . Yii::$app->request->pathInfo])
                ->orderBy(['id' => SORT_DESC])
                ->one();
            if ($menu) {
                return $menu->getPermissions()
                    ->andWhere(['method' => ''])
                    ->one();
            }
        }

        $params = explode('/', Yii::$app->request->url);
        if (!$params = array_filter($params)) {
            return null;
        }

        $menu = AuthMenu::find()
            ->andWhere(['route' => '/' . $params[1] . '/' . $params[2]])
            ->orderBy(['id' => SORT_DESC])
            ->one();

        if ($menu) {
            if (isset($params[3])) {
                if (($index = strpos($params[3], '?')) !== false) {
                    $method = substr($params[3], 0, $index);
                } else {
                    $method = $params[3];
                }
            } else {
                $method = 'index';
            }
            return $menu->getPermissions()
                ->andWhere(['method' => $method])
                ->one();
        }
        return null;
    }
}
