<?php

namespace backend\models\system;

use Yii;

/**
 * This is the model class for table "{{%auth_menu}}".
 *
 * @property integer $id
 * @property string $name
 * @property integer $parent_id
 * @property string $route
 * @property int $sort
 */
class AuthMenu extends \yii\db\ActiveRecord
{
    const TOP_MENU_TYPE = 0;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%auth_menu}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'route'], 'required'],
            [['parent_id', 'sort'], 'integer'],
            [['parent_id', 'sort'], 'default', 'value' => 0],
            [['name'], 'string', 'max' => 32],
            [['route'], 'string', 'max' => 128]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('System', 'ID'),
            'name' => Yii::t('System', 'Menu Name'),
            'parent_id' => Yii::t('System', 'Menu Parent ID'),
            'route' => Yii::t('System', 'Menu Route'),
            'sort' => Yii::t('System', 'Menu Sort'),
        ];
    }

    public function categories()
    {
        $menus = AuthMenu::find()
            ->where(['parent_id' => self::TOP_MENU_TYPE])
            ->orderBy(['sort' => SORT_DESC])
            ->asArray()
            ->all();

        foreach ($menus as &$menu) {
            $menu['children'] = AuthMenu::find()
                ->where(['parent_id' => $menu['id']])
                ->orderBy(['sort' => SORT_DESC])
                ->asArray()
                ->all();
        }

        return $menus;
    }

    public function formatAllMenu()
    {
        $menus = $this->categories();
        foreach ($menus as &$menu) {
            foreach ($menu['children'] as &$child) {
                $child['children'] = AuthMenu::find()
                    ->where(['parent_id' => $child['id']])
                    ->orderBy(['sort' => SORT_DESC])
                    ->asArray()
                    ->all();
            }
        }
        return $menus;
    }

    public function afterDelete()
    {
        foreach (AuthMenu::findAll(['parent_id' => $this->id]) as $menu) {
            AuthMenu::deleteAll(['parent_id' => $menu['id']]);
            $menu->delete();
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function getParentMenu()
    {
        $menus = [];
        if ($this->parent_id) {
            $menu = AuthMenu::findOne($this->parent_id);
            $menus[] = $menu->name;
            if ($menu->parent_id) {
                $menu = AuthMenu::findOne($menu->parent_id);
                array_unshift($menus, $menu->name);
            }
        } else {
            $menus[] = Yii::t('System', 'Top Menu Name');
        }
        return $menus;
    }
}
